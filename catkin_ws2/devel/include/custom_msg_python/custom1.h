// Generated by gencpp from file custom_msg_python/custom1.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PYTHON_MESSAGE_CUSTOM1_H
#define CUSTOM_MSG_PYTHON_MESSAGE_CUSTOM1_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg_python
{
template <class ContainerAllocator>
struct custom1_
{
  typedef custom1_<ContainerAllocator> Type;

  custom1_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , e1(0.0)
    , e2(0.0)
    , e3(0.0)
    , e4(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , priority(false)  {
    }
  custom1_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , e1(0.0)
    , e2(0.0)
    , e3(0.0)
    , e4(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , priority(false)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _e1_type;
  _e1_type e1;

   typedef float _e2_type;
  _e2_type e2;

   typedef float _e3_type;
  _e3_type e3;

   typedef float _e4_type;
  _e4_type e4;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef uint8_t _priority_type;
  _priority_type priority;





  typedef boost::shared_ptr< ::custom_msg_python::custom1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_python::custom1_<ContainerAllocator> const> ConstPtr;

}; // struct custom1_

typedef ::custom_msg_python::custom1_<std::allocator<void> > custom1;

typedef boost::shared_ptr< ::custom_msg_python::custom1 > custom1Ptr;
typedef boost::shared_ptr< ::custom_msg_python::custom1 const> custom1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_python::custom1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_python::custom1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_python::custom1_<ContainerAllocator1> & lhs, const ::custom_msg_python::custom1_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.e1 == rhs.e1 &&
    lhs.e2 == rhs.e2 &&
    lhs.e3 == rhs.e3 &&
    lhs.e4 == rhs.e4 &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.priority == rhs.priority;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_python::custom1_<ContainerAllocator1> & lhs, const ::custom_msg_python::custom1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::custom1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::custom1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::custom1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::custom1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::custom1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::custom1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_python::custom1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31d9aef80e7e38c1513be9d4decd01d5";
  }

  static const char* value(const ::custom_msg_python::custom1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31d9aef80e7e38c1ULL;
  static const uint64_t static_value2 = 0x513be9d4decd01d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_python::custom1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/custom1";
  }

  static const char* value(const ::custom_msg_python::custom1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_python::custom1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"\n"
"float32 e1\n"
"float32 e2\n"
"float32 e3\n"
"float32 e4\n"
"\n"
"float32 velocity\n"
"float32 acceleration\n"
"bool priority\n"
;
  }

  static const char* value(const ::custom_msg_python::custom1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_python::custom1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.e1);
      stream.next(m.e2);
      stream.next(m.e3);
      stream.next(m.e4);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.priority);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_python::custom1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_python::custom1_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "e1: ";
    Printer<float>::stream(s, indent + "  ", v.e1);
    s << indent << "e2: ";
    Printer<float>::stream(s, indent + "  ", v.e2);
    s << indent << "e3: ";
    Printer<float>::stream(s, indent + "  ", v.e3);
    s << indent << "e4: ";
    Printer<float>::stream(s, indent + "  ", v.e4);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "priority: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.priority);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PYTHON_MESSAGE_CUSTOM1_H
