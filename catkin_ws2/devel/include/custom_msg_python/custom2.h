// Generated by gencpp from file custom_msg_python/custom2.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PYTHON_MESSAGE_CUSTOM2_H
#define CUSTOM_MSG_PYTHON_MESSAGE_CUSTOM2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace custom_msg_python
{
template <class ContainerAllocator>
struct custom2_
{
  typedef custom2_<ContainerAllocator> Type;

  custom2_()
    : handposition()
    , handvelocity()
    , armposition()
    , armvelocity()
    , time(0.0)  {
    }
  custom2_(const ContainerAllocator& _alloc)
    : handposition(_alloc)
    , handvelocity(_alloc)
    , armposition(_alloc)
    , armvelocity(_alloc)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _handposition_type;
  _handposition_type handposition;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _handvelocity_type;
  _handvelocity_type handvelocity;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _armposition_type;
  _armposition_type armposition;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _armvelocity_type;
  _armvelocity_type armvelocity;

   typedef float _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::custom_msg_python::custom2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_python::custom2_<ContainerAllocator> const> ConstPtr;

}; // struct custom2_

typedef ::custom_msg_python::custom2_<std::allocator<void> > custom2;

typedef boost::shared_ptr< ::custom_msg_python::custom2 > custom2Ptr;
typedef boost::shared_ptr< ::custom_msg_python::custom2 const> custom2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_python::custom2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_python::custom2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_python::custom2_<ContainerAllocator1> & lhs, const ::custom_msg_python::custom2_<ContainerAllocator2> & rhs)
{
  return lhs.handposition == rhs.handposition &&
    lhs.handvelocity == rhs.handvelocity &&
    lhs.armposition == rhs.armposition &&
    lhs.armvelocity == rhs.armvelocity &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_python::custom2_<ContainerAllocator1> & lhs, const ::custom_msg_python::custom2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::custom2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::custom2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::custom2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::custom2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::custom2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::custom2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_python::custom2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42115633ead9253039212ba53419851b";
  }

  static const char* value(const ::custom_msg_python::custom2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42115633ead92530ULL;
  static const uint64_t static_value2 = 0x39212ba53419851bULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_python::custom2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/custom2";
  }

  static const char* value(const ::custom_msg_python::custom2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_python::custom2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point handposition\n"
"geometry_msgs/Point handvelocity\n"
"geometry_msgs/Point armposition\n"
"geometry_msgs/Point armvelocity\n"
"float32 time\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::custom_msg_python::custom2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_python::custom2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.handposition);
      stream.next(m.handvelocity);
      stream.next(m.armposition);
      stream.next(m.armvelocity);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_python::custom2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_python::custom2_<ContainerAllocator>& v)
  {
    s << indent << "handposition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.handposition);
    s << indent << "handvelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.handvelocity);
    s << indent << "armposition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.armposition);
    s << indent << "armvelocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.armvelocity);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PYTHON_MESSAGE_CUSTOM2_H
