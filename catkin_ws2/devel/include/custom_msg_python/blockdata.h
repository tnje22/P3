// Generated by gencpp from file custom_msg_python/blockdata.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PYTHON_MESSAGE_BLOCKDATA_H
#define CUSTOM_MSG_PYTHON_MESSAGE_BLOCKDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msg_python
{
template <class ContainerAllocator>
struct blockdata_
{
  typedef blockdata_<ContainerAllocator> Type;

  blockdata_()
    : xlen(0)
    , ylen(0)
    , zlen(0)
    , xpos(0.0)
    , ypos(0.0)
    , zpos(0.0)
    , rotation(0)
    , blocktype(0)
    , blockcolor(0)  {
    }
  blockdata_(const ContainerAllocator& _alloc)
    : xlen(0)
    , ylen(0)
    , zlen(0)
    , xpos(0.0)
    , ypos(0.0)
    , zpos(0.0)
    , rotation(0)
    , blocktype(0)
    , blockcolor(0)  {
  (void)_alloc;
    }



   typedef int32_t _xlen_type;
  _xlen_type xlen;

   typedef int32_t _ylen_type;
  _ylen_type ylen;

   typedef int32_t _zlen_type;
  _zlen_type zlen;

   typedef float _xpos_type;
  _xpos_type xpos;

   typedef float _ypos_type;
  _ypos_type ypos;

   typedef float _zpos_type;
  _zpos_type zpos;

   typedef int32_t _rotation_type;
  _rotation_type rotation;

   typedef int32_t _blocktype_type;
  _blocktype_type blocktype;

   typedef int32_t _blockcolor_type;
  _blockcolor_type blockcolor;





  typedef boost::shared_ptr< ::custom_msg_python::blockdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_python::blockdata_<ContainerAllocator> const> ConstPtr;

}; // struct blockdata_

typedef ::custom_msg_python::blockdata_<std::allocator<void> > blockdata;

typedef boost::shared_ptr< ::custom_msg_python::blockdata > blockdataPtr;
typedef boost::shared_ptr< ::custom_msg_python::blockdata const> blockdataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_python::blockdata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_python::blockdata_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_python::blockdata_<ContainerAllocator1> & lhs, const ::custom_msg_python::blockdata_<ContainerAllocator2> & rhs)
{
  return lhs.xlen == rhs.xlen &&
    lhs.ylen == rhs.ylen &&
    lhs.zlen == rhs.zlen &&
    lhs.xpos == rhs.xpos &&
    lhs.ypos == rhs.ypos &&
    lhs.zpos == rhs.zpos &&
    lhs.rotation == rhs.rotation &&
    lhs.blocktype == rhs.blocktype &&
    lhs.blockcolor == rhs.blockcolor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_python::blockdata_<ContainerAllocator1> & lhs, const ::custom_msg_python::blockdata_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::blockdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::blockdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::blockdata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::blockdata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::blockdata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::blockdata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_python::blockdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eac9cc71fe8df90f9f784800602aae10";
  }

  static const char* value(const ::custom_msg_python::blockdata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeac9cc71fe8df90fULL;
  static const uint64_t static_value2 = 0x9f784800602aae10ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_python::blockdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/blockdata";
  }

  static const char* value(const ::custom_msg_python::blockdata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_python::blockdata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 xlen\n"
"int32 ylen\n"
"int32 zlen\n"
"\n"
"float32 xpos\n"
"float32 ypos\n"
"float32 zpos\n"
"\n"
"int32 rotation\n"
"\n"
"int32 blocktype\n"
"int32 blockcolor\n"
;
  }

  static const char* value(const ::custom_msg_python::blockdata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_python::blockdata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xlen);
      stream.next(m.ylen);
      stream.next(m.zlen);
      stream.next(m.xpos);
      stream.next(m.ypos);
      stream.next(m.zpos);
      stream.next(m.rotation);
      stream.next(m.blocktype);
      stream.next(m.blockcolor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct blockdata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_python::blockdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_python::blockdata_<ContainerAllocator>& v)
  {
    s << indent << "xlen: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xlen);
    s << indent << "ylen: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ylen);
    s << indent << "zlen: ";
    Printer<int32_t>::stream(s, indent + "  ", v.zlen);
    s << indent << "xpos: ";
    Printer<float>::stream(s, indent + "  ", v.xpos);
    s << indent << "ypos: ";
    Printer<float>::stream(s, indent + "  ", v.ypos);
    s << indent << "zpos: ";
    Printer<float>::stream(s, indent + "  ", v.zpos);
    s << indent << "rotation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rotation);
    s << indent << "blocktype: ";
    Printer<int32_t>::stream(s, indent + "  ", v.blocktype);
    s << indent << "blockcolor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.blockcolor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PYTHON_MESSAGE_BLOCKDATA_H
