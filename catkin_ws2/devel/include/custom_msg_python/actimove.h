// Generated by gencpp from file custom_msg_python/actimove.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PYTHON_MESSAGE_ACTIMOVE_H
#define CUSTOM_MSG_PYTHON_MESSAGE_ACTIMOVE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msg_python/blockdata.h>

namespace custom_msg_python
{
template <class ContainerAllocator>
struct actimove_
{
  typedef actimove_<ContainerAllocator> Type;

  actimove_()
    : block()
    , humanprio(0.0)
    , poscertainty(0.0)
    , stabilety(0.0)  {
    }
  actimove_(const ContainerAllocator& _alloc)
    : block(_alloc)
    , humanprio(0.0)
    , poscertainty(0.0)
    , stabilety(0.0)  {
  (void)_alloc;
    }



   typedef  ::custom_msg_python::blockdata_<ContainerAllocator>  _block_type;
  _block_type block;

   typedef float _humanprio_type;
  _humanprio_type humanprio;

   typedef float _poscertainty_type;
  _poscertainty_type poscertainty;

   typedef float _stabilety_type;
  _stabilety_type stabilety;





  typedef boost::shared_ptr< ::custom_msg_python::actimove_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_python::actimove_<ContainerAllocator> const> ConstPtr;

}; // struct actimove_

typedef ::custom_msg_python::actimove_<std::allocator<void> > actimove;

typedef boost::shared_ptr< ::custom_msg_python::actimove > actimovePtr;
typedef boost::shared_ptr< ::custom_msg_python::actimove const> actimoveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_python::actimove_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_python::actimove_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_python::actimove_<ContainerAllocator1> & lhs, const ::custom_msg_python::actimove_<ContainerAllocator2> & rhs)
{
  return lhs.block == rhs.block &&
    lhs.humanprio == rhs.humanprio &&
    lhs.poscertainty == rhs.poscertainty &&
    lhs.stabilety == rhs.stabilety;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_python::actimove_<ContainerAllocator1> & lhs, const ::custom_msg_python::actimove_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::actimove_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::actimove_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::actimove_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::actimove_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::actimove_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::actimove_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_python::actimove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02dcd61482d1dd9838c30c59b919c3b8";
  }

  static const char* value(const ::custom_msg_python::actimove_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02dcd61482d1dd98ULL;
  static const uint64_t static_value2 = 0x38c30c59b919c3b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_python::actimove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/actimove";
  }

  static const char* value(const ::custom_msg_python::actimove_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_python::actimove_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/blockdata block\n"
"float32 humanprio\n"
"float32 poscertainty\n"
"float32 stabilety\n"
"\n"
"================================================================================\n"
"MSG: custom_msg_python/blockdata\n"
"int32 xlen\n"
"int32 ylen\n"
"int32 zlen\n"
"\n"
"float32 xpos\n"
"float32 ypos\n"
"float32 zpos\n"
"\n"
"int32 rotation\n"
"\n"
"int32 blocktype\n"
"int32 blockcolor\n"
;
  }

  static const char* value(const ::custom_msg_python::actimove_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_python::actimove_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.block);
      stream.next(m.humanprio);
      stream.next(m.poscertainty);
      stream.next(m.stabilety);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct actimove_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_python::actimove_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_python::actimove_<ContainerAllocator>& v)
  {
    s << indent << "block: ";
    s << std::endl;
    Printer< ::custom_msg_python::blockdata_<ContainerAllocator> >::stream(s, indent + "  ", v.block);
    s << indent << "humanprio: ";
    Printer<float>::stream(s, indent + "  ", v.humanprio);
    s << indent << "poscertainty: ";
    Printer<float>::stream(s, indent + "  ", v.poscertainty);
    s << indent << "stabilety: ";
    Printer<float>::stream(s, indent + "  ", v.stabilety);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PYTHON_MESSAGE_ACTIMOVE_H
