// Generated by gencpp from file custom_msg_python/activmoveslist.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PYTHON_MESSAGE_ACTIVMOVESLIST_H
#define CUSTOM_MSG_PYTHON_MESSAGE_ACTIVMOVESLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msg_python/actimove.h>

namespace custom_msg_python
{
template <class ContainerAllocator>
struct activmoveslist_
{
  typedef activmoveslist_<ContainerAllocator> Type;

  activmoveslist_()
    : listing()  {
    }
  activmoveslist_(const ContainerAllocator& _alloc)
    : listing(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::custom_msg_python::actimove_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::custom_msg_python::actimove_<ContainerAllocator> >> _listing_type;
  _listing_type listing;





  typedef boost::shared_ptr< ::custom_msg_python::activmoveslist_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_python::activmoveslist_<ContainerAllocator> const> ConstPtr;

}; // struct activmoveslist_

typedef ::custom_msg_python::activmoveslist_<std::allocator<void> > activmoveslist;

typedef boost::shared_ptr< ::custom_msg_python::activmoveslist > activmoveslistPtr;
typedef boost::shared_ptr< ::custom_msg_python::activmoveslist const> activmoveslistConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_python::activmoveslist_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_python::activmoveslist_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msg_python::activmoveslist_<ContainerAllocator1> & lhs, const ::custom_msg_python::activmoveslist_<ContainerAllocator2> & rhs)
{
  return lhs.listing == rhs.listing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msg_python::activmoveslist_<ContainerAllocator1> & lhs, const ::custom_msg_python::activmoveslist_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msg_python

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_python::activmoveslist_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_python::activmoveslist_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_python::activmoveslist_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad5a8f0f1484d74e62d785ee2bf5ef94";
  }

  static const char* value(const ::custom_msg_python::activmoveslist_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad5a8f0f1484d74eULL;
  static const uint64_t static_value2 = 0x62d785ee2bf5ef94ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/activmoveslist";
  }

  static const char* value(const ::custom_msg_python::activmoveslist_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_python/actimove[] listing\n"
"\n"
"================================================================================\n"
"MSG: custom_msg_python/actimove\n"
"custom_msg_python/blockdata block\n"
"float32 humanprio\n"
"float32 poscertainty\n"
"float32 stabilety\n"
"\n"
"================================================================================\n"
"MSG: custom_msg_python/blockdata\n"
"int32 xlen\n"
"int32 ylen\n"
"int32 zlen\n"
"\n"
"float32 xpos\n"
"float32 ypos\n"
"float32 zpos\n"
"\n"
"int32 rotation\n"
"\n"
"int32 blocktype\n"
"int32 blockcolor\n"
;
  }

  static const char* value(const ::custom_msg_python::activmoveslist_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.listing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct activmoveslist_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_python::activmoveslist_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_python::activmoveslist_<ContainerAllocator>& v)
  {
    s << indent << "listing[]" << std::endl;
    for (size_t i = 0; i < v.listing.size(); ++i)
    {
      s << indent << "  listing[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::custom_msg_python::actimove_<ContainerAllocator> >::stream(s, indent + "    ", v.listing[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PYTHON_MESSAGE_ACTIVMOVESLIST_H
